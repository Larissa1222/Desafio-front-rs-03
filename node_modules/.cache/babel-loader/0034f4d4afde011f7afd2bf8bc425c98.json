{"ast":null,"code":"var _jsxFileName = \"/home/larissa/Documentos/Front-Rocket/desafio-front-cap2-01/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [{\n      id: 0,\n      title: 'Tenis',\n      amount: 400,\n      image: 'turur',\n      price: 'aaa'\n    }, {\n      id: 1,\n      title: 'Carro',\n      amount: 400,\n      image: 'turur',\n      price: 'aaa'\n    }, {\n      id: 2,\n      title: 'Carro',\n      amount: 400,\n      image: 'turur',\n      price: 'aaa'\n    }];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n        const newProduct = { ...product.data,\n          amount: 1\n        };\n        updatedCart.push(newProduct);\n      }\n\n      setCart(updatedCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart));\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {\n      toast.error('Erro na remoção do produto');\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      if (amount <= 0) {}\n    } catch {\n      toast.error('Quantidade solicitada fora de estoque');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"OzPXcqg7Gmrmkg4kDpn053NW1PQ=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/larissa/Documentos/Front-Rocket/desafio-front-cap2-01/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","id","title","amount","image","price","addProduct","productId","updatedCart","productExists","find","product","stock","get","stockAmount","data","currentAmount","error","newProduct","push","setItem","stringify","removeProduct","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [  {id: 0, title: 'Tenis', amount: 400, image: 'turur', price: 'aaa', },\n    {id: 1, title: 'Carro', amount: 400, image: 'turur', price: 'aaa', },\n    {id: 2, title: 'Carro', amount: 400, image: 'turur', price: 'aaa', }];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if(amount > stockAmount){\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if(productExists){\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n\n        const newProduct = {\n          ...product.data,\n          amount: 1\n        }\n        updatedCart.push(newProduct);\n      }\n      setCart(updatedCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart));\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      toast.error('Erro na remoção do produto');\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      if(amount <= 0){\n\n      }\n    } catch {\n      toast.error('Quantidade solicitada fora de estoque');\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}